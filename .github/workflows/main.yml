name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
#ffdfdfdfdf

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: write
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TF_VAR_ssh: "${{ secrets.K8S_SSH_PUBLIC }}"
  GH_PAT: ${{ secrets.GH_PAT }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}  

jobs:
  unit-test:
    name: "Run Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Clone external repository
        run: |
          git clone https://github.com/Yur4ik1234/CIFAR-10-flask.git
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Set up a virtual environment
        run: python3 -m venv venv
        working-directory: CIFAR-10-flask

      - name: Activate virtual environment and install dependencies
        run: |
          source venv/bin/activate
          pip3 install -r requirements.txt
          pip3 install --upgrade Flask
          pip3 install --upgrade Werkzeug

        working-directory: CIFAR-10-flask

      - name: Run Unit Tests
        run: |
          source venv/bin/activate
          python3 ./test_app.py
        working-directory: CIFAR-10-flask

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [unit-test]
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}


    steps:
   
     
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Plan
      id: tf-plan
      
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ./tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/master'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
                
  terraform-apply:
    name: 'Terraform Apply'
    
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    outputs:
      pub-ip: ${{ steps.pub-ip.outputs.pub-ip }}
    #hh
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: .

    # Terraform Apply
    - name: Terraform Apply
      
      run: terraform apply -auto-approve tfplan
  # use script
  parsing-ip:
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9  


    - name: Azure Login
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      shell: bash

    - name: List VMSS Instance Public IPs
      run: |
        az vmss list-instance-public-ips --name example-vmss --resource-group azure-resource_group | python3 parser.py > ip.txt
      working-directory: ${{ github.workspace }}

    - name: Append IPs to host.txt
      run: |
        python3 iphost.py >> host.txt
      working-directory: ${{ github.workspace }}
    
    - name: Commit and Push Changes
      run: |
        git config --global user.email "gajdaryura@gmail.com"
        git config --global user.name "Yur4ik1234"
        git add ip.txt host.txt
        git commit -m "Update IPs"
        git push https://$GH_PAT@github.com/Yur4ik1234/auto-cifar10.git HEAD:master
      env: 
        GH_PAT: ${{ secrets.GH_PAT }}  
      working-directory: ${{ github.workspace }}
    
  
  ansible-deploy:
    name: 'Deploy Ansible Playbook'
    runs-on: ubuntu-latest
    needs: [parsing-ip]  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" > ansible_ssh_key
          chmod 600 ansible_ssh_key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i host.txt -u adminuser --extra-vars "ansible_ssh_password=${{ secrets.SSH_PASSWORD }}" ansible/playbook.yaml --force

  
  
    
          
          
